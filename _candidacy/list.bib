
@article{computing_community_consortium_led_by_mark_d._hill_21st_2012,
	title = {21st Century Computer Architecture},
	url = {http://cra.org/ccc/docs/init/21stcenturyarchitecturewhitepaper.pdf},
	journal = {A Community White Paper},
	author = {{Computing Community Consortium, led by Mark D. Hill}},
	month = may,
	year = {2012},
	keywords = {Motivation}
},

@inproceedings{abts_achieving_2009,
	address = {New York, {NY}, {USA}},
	series = {{ISCA} '09},
	title = {Achieving predictable performance through better memory controller placement in many-core {CMPs}},
	isbn = {978-1-60558-526-0},
	location = {Austin, {TX}, {USA}},
	url = {http://doi.acm.org/10.1145/1555754.1555810},
	doi = {10.1145/1555754.1555810},
	booktitle = {Proceedings of the 36th annual international symposium on Computer architecture},
	publisher = {{ACM}},
	author = {Abts, Dennis and Enright Jerger, Natalie D. and Kim, John and Gibson, Dan and Lipasti, Mikko H.},
	year = {2009},
	keywords = {Memory Controller Scheduling},
	pages = {451–461}
},

@inproceedings{zhuravlev_addressing_2010,
	address = {New York, {NY}, {USA}},
	series = {{ASPLOS} {XV}},
	title = {Addressing shared resource contention in multicore processors via scheduling},
	isbn = {978-1-60558-839-1},
	location = {Pittsburgh, Pennsylvania, {USA}},
	url = {http://doi.acm.org/10.1145/1736020.1736036},
	doi = {10.1145/1736020.1736036},
	booktitle = {Proceedings of the fifteenth edition of {ASPLOS} on Architectural support for programming languages and operating systems},
	publisher = {{ACM}},
	author = {Zhuravlev, Sergey and Blagodurov, Sergey and Fedorova, Alexandra},
	year = {2010},
	keywords = {Scalability},
	pages = {129–142}
},

@inproceedings{kim_adaptive_2002,
	address = {New York, {NY}, {USA}},
	series = {{ASPLOS} X},
	title = {An adaptive, non-uniform cache structure for wire-delay dominated on-chip caches},
	isbn = {1-58113-574-2},
	location = {San Jose, California},
	url = {http://doi.acm.org/10.1145/605397.605420},
	doi = {10.1145/605397.605420},
	booktitle = {Proceedings of the 10th international conference on Architectural support for programming languages and operating systems},
	publisher = {{ACM}},
	author = {Kim, Changkyu and Burger, Doug and Keckler, Stephen W.},
	year = {2002},
	keywords = {Non-Uniform Cache Architectures ({NUCA)}},
	pages = {211–222}
},

@inproceedings{boyd-wickizer_analysis_2010,
	address = {Berkeley, {CA}, {USA}},
	series = {{OSDI'10}},
	title = {An analysis of Linux scalability to many cores},
	url = {http://dl.acm.org/citation.cfm?id=1924943.1924944},
	abstract = {This paper analyzes the scalability of seven system applications (Exim, memcached, Apache, {PostgreSQL}, gmake, Psearchy, and {MapReduce)} running on Linux on a 48- core computer. Except for gmake, all applications trigger scalability bottlenecks inside a recent Linux kernel. Using mostly standard parallel programming techniques-- this paper introduces one new technique, sloppy counters-- these bottlenecks can be removed from the kernel or avoided by changing the applications slightly. Modifying the kernel required in total 3002 lines of code changes. A speculative conclusion from this analysis is that there is no scalability reason to give up on traditional operating system organizations just yet.},
	urldate = {2013-04-15},
	booktitle = {Proceedings of the 9th {USENIX} conference on Operating systems design and implementation},
	publisher = {{USENIX} Association},
	author = {Boyd-Wickizer, Silas and Clements, Austin T. and Mao, Yandong and Pesterev, Aleksey and Kaashoek, M. Frans and Morris, Robert and Zeldovich, Nickolai},
	year = {2010},
	keywords = {Scalability},
	pages = {1–8}
},

@inproceedings{rafique_architectural_2006,
	title = {Architectural support for operating system-driven {CMP} cache management},
	url = {http://dl.acm.org/citation.cfm?id=1152154.1152160},
	urldate = {2013-04-08},
	booktitle = {Proceedings of the 15th international conference on Parallel architectures and compilation techniques},
	author = {Rafique, Nauman and Lim, Won-Taek and Thottethodi, Mithuna},
	year = {2006},
	keywords = {Memory System Partitioning},
	pages = {2–12},
	file = {[PDF] from purdue.edu:/home/cota/.mozilla/firefox/a7kcjbg7.default/zotero/storage/C65QMJE8/Rafique et al. - 2006 - Architectural support for operating system-driven .pdf:application/pdf;Snapshot:/home/cota/.mozilla/firefox/a7kcjbg7.default/zotero/storage/3MCKG3Q4/citation.html:text/html}
},

@inproceedings{lee_cloudcache:_2011,
	title = {{CloudCache:} Expanding and shrinking private caches},
	shorttitle = {{CloudCache}},
	url = {http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=5749731},
	urldate = {2013-04-01},
	booktitle = {2011 {IEEE} 17th International Symposium on High Performance Computer Architecture ({HPCA)}},
	author = {Lee, Hyunjin and Cho, Sangyeun and Childers, Bruce R.},
	year = {2011},
	keywords = {Non-Uniform Cache Architectures ({NUCA)}},
	pages = {219–230},
	file = {Snapshot:/home/cota/.mozilla/firefox/a7kcjbg7.default/zotero/storage/CU5PFXS4/cookiedetectresponse.html:text/html}
},

@inproceedings{hsu_communist_2006,
	title = {Communist, utilitarian, and capitalist cache policies on {CMPs:} caches as a shared resource},
	shorttitle = {Communist, utilitarian, and capitalist cache policies on {CMPs}},
	url = {http://dl.acm.org/citation.cfm?id=1152161},
	urldate = {2013-04-09},
	booktitle = {Proceedings of the 15th international conference on Parallel architectures and compilation techniques},
	author = {Hsu, Lisa R. and Reinhardt, Steven K. and Iyer, Ravishankar and Makineni, Srihari},
	year = {2006},
	keywords = {Memory System Partitioning},
	pages = {13–22},
	file = {Snapshot:/home/cota/.mozilla/firefox/a7kcjbg7.default/zotero/storage/9FXDNUAT/citation.html:text/html}
},

@inproceedings{sundararajan_cooperative_2012,
	title = {Cooperative partitioning: Energy-efficient cache partitioning for high-performance {CMPs}},
	shorttitle = {Cooperative partitioning},
	url = {http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=6169036},
	doi = {10.1109/HPCA.2012.6169036},
	abstract = {Intelligently partitioning the last-level cache within a chip multiprocessor can bring significant performance improvements. Resources are given to the applications that can benefit most from them, restricting each core to a number of logical cache ways. However, although overall performance is increased, existing schemes fail to consider energy saving when making their partitioning decisions. This paper presents Cooperative Partitioning, a runtime partitioning scheme that reduces both dynamic and static energy while maintaining high performance. It works by enforcing cached data to be way-aligned, so that a way is owned by a single core at any time. Cores cooperate with each other to migrate ways between themselves after partitioning decisions have been made. Upon access to the cache, a core needs only to consult the ways that it owns to find its data, saving dynamic energy. Unused ways can be power-gated for static energy saving. We evaluate our approach on two-core and four-core systems, showing that we obtain average dynamic and static energy savings of 35\% and 25\% compared to a fixed partitioning scheme. In addition, Cooperative Partitioning maintains high performance while transferring ways five times faster than an existing state-of-the-art technique.},
	booktitle = {2012 {IEEE} 18th International Symposium on High Performance Computer Architecture ({HPCA)}},
	author = {Sundararajan, {K.T.} and Porpodas, V. and Jones, {T.M.} and Topham, {N.P.} and Franke, B.},
	year = {2012},
	keywords = {Memory System Partitioning},
	pages = {1--12},
	file = {IEEE Xplore Abstract Record:/home/cota/.mozilla/firefox/a7kcjbg7.default/zotero/storage/6HAH3V9U/abs_all.html:text/html;IEEE Xplore Full Text PDF:/home/cota/.mozilla/firefox/a7kcjbg7.default/zotero/storage/W9G8QEJG/Sundararajan et al. - 2012 - Cooperative partitioning Energy-efficient cache p.pdf:application/pdf}
},

@inproceedings{herrero_elastic_2010,
	address = {New York, {NY}, {USA}},
	series = {{ISCA} '10},
	title = {Elastic cooperative caching: an autonomous dynamically adaptive memory hierarchy for chip multiprocessors},
	isbn = {978-1-4503-0053-7},
	location = {Saint-Malo, France},
	url = {http://doi.acm.org/10.1145/1815961.1816018},
	doi = {10.1145/1815961.1816018},
	booktitle = {Proceedings of the 37th annual international symposium on Computer architecture},
	publisher = {{ACM}},
	author = {Herrero, Enric and González, José and Canal, Ramon},
	year = {2010},
	keywords = {Non-Uniform Cache Architectures ({NUCA)}},
	pages = {419–428}
},

@inproceedings{merino_esp-nuca:_2010,
	title = {{ESP-NUCA:} A low-cost adaptive non-uniform cache architecture},
	shorttitle = {{ESP-NUCA}},
	url = {http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=5416641},
	urldate = {2013-04-01},
	booktitle = {2010 {IEEE} 16th International Symposium on High Performance Computer Architecture ({HPCA)}},
	author = {Merino, Javier and Puente, Valentin and Gregorio, Jose A.},
	year = {2010},
	keywords = {Non-Uniform Cache Architectures ({NUCA)}},
	pages = {1–10},
	file = {[PDF] from unican.es:/home/cota/.mozilla/firefox/a7kcjbg7.default/zotero/storage/QWNQEVMV/Merino et al. - 2010 - ESP-NUCA A low-cost adaptive non-uniform cache ar.pdf:application/pdf;Snapshot:/home/cota/.mozilla/firefox/a7kcjbg7.default/zotero/storage/JMUA2BD8/cookiedetectresponse.html:text/html}
},

@inproceedings{ebrahimi_fairness_2010,
	title = {Fairness via source throttling: A configurable and high-performance fairness substrate for multi-core memory systems},
	shorttitle = {Fairness via source throttling},
	url = {http://dx.doi.org/10.1145/1736020.1736058},
	abstract = {Cores in a chip-multiprocessor ({CMP)} system share multiple hardware resources in the memory subsystem. If resource sharing is unfair, some applications can be delayed significantly while others are unfairly prioritized. Previous research proposed separate fairness mechanisms in each individual resource. Such resource-based fairness mechanisms implemented independently in each resource can make contradictory decisions, leading to low fairness and loss of performance. Therefore, a coordinated mechanism that provides fairness in the entire shared memory system is desirable. This paper proposes a new approach that provides fairness in the entiresharedmemorysystem, thereby eliminating the need for and complexity of developing fairness mechanisms for each individual resource. Our technique, Fairness via Source Throttling ({FST)}, estimates the unfairness in the entire shared memory system. If the estimated unfairness is above a threshold set by system software, {FST} throttles down cores causing unfairness by limiting the number of requests they can inject into the system and the frequency at which they do. As such, oursource-based fairness control ensures fairness decisions are made in tandem in the entire memory system. {FST} also enforces thread priorities/weights, and enables system software to enforce different fairness objectives and fairness-performance tradeoffs in the memory system. Our evaluations show that {FST} provides the best system fairness and performance compared to four systems with no fairness control and with state-of-the-art fairness mechanisms implemented in both shared caches and memory controllers.},
	booktitle = {In Architectural Support for Programming Languages and Operating Systems ({ASPLOS} ’10)},
	author = {Ebrahimi, Eiman and Joo, Chang and Onur, Lee and Yale, Mutlu and Patt, N.},
	year = {2010},
	keywords = {Memory System Partitioning},
	pages = {335–346},
	file = {Citeseer - Full Text PDF:/home/cota/.mozilla/firefox/a7kcjbg7.default/zotero/storage/T5WVJICS/Ebrahimi et al. - 2010 - Fairness via source throttling A configurable and.pdf:application/pdf;Citeseer - Snapshot:/home/cota/.mozilla/firefox/a7kcjbg7.default/zotero/storage/X8Q9I5RG/summary.html:text/html}
},

@article{patt_future_2010,
	title = {Future microprocessors: Multi-core, mega-nonsense, and what we must do differently moving forward},
	shorttitle = {Future microprocessors},
	url = {http://www.cic.unb.br/docentes/alba/lecture_patt_12009.ppt},
	journal = {Lecture at Universidade de Brasilia, {DF}, Brazil, August 2009. Also a Distinguished Lecture at {UIUC}},
	author = {Patt, Yale N.},
	month = apr,
	year = {2010},
	keywords = {Motivation}
},

@inproceedings{cho_managing_2006,
	title = {Managing distributed, shared L2 caches through {OS-level} page allocation},
	url = {http://dl.acm.org/citation.cfm?id=1194858},
	urldate = {2013-04-01},
	booktitle = {Proceedings of the 39th Annual {IEEE/ACM} International Symposium on Microarchitecture},
	author = {Cho, Sangyeun and Jin, Lei},
	year = {2006},
	keywords = {Memory System Partitioning},
	pages = {455–468},
	file = {[PDF] from multicoreinfo.com:/home/cota/.mozilla/firefox/a7kcjbg7.default/zotero/storage/AFAJX36D/Cho and Jin - 2006 - Managing distributed, shared L2 caches through OS-.pdf:application/pdf;Snapshot:/home/cota/.mozilla/firefox/a7kcjbg7.default/zotero/storage/KMD65V7S/citation.html:text/html}
},

@inproceedings{moscibroda_memory_2007,
	title = {Memory performance attacks: Denial of memory service in multi-core systems},
	shorttitle = {Memory performance attacks},
	url = {http://dl.acm.org/citation.cfm?id=1362921},
	urldate = {2013-04-09},
	booktitle = {Proceedings of 16th {USENIX} Security Symposium on {USENIX} Security Symposium},
	author = {Moscibroda, Thomas and Mutlu, Onur},
	year = {2007},
	keywords = {Memory Controller Scheduling},
	pages = {18},
	file = {[HTML] from usenix.org:/home/cota/.mozilla/firefox/a7kcjbg7.default/zotero/storage/S7B433RJ/moscibroda_html.html:text/html;Snapshot:/home/cota/.mozilla/firefox/a7kcjbg7.default/zotero/storage/HCQX2BU3/citation.html:text/html}
},

@inproceedings{boyd-wickizer_non-scalable_2012,
	title = {Non-scalable locks are dangerous},
	url = {http://pdos.csail.mit.edu/papers/linux:lock.pdf},
	booktitle = {Proceedings of the Linux Symposium, Ottawa, Canada},
	author = {Boyd-Wickizer, Silas and Kaashoek, M. Frans and Morris, Robert and Zeldovich, Nickolai},
	month = jul,
	year = {2012},
	keywords = {Scalability}
},

@inproceedings{clements_scalable_2012,
	title = {Scalable address spaces using {RCU} balanced trees},
	url = {http://dl.acm.org/citation.cfm?id=2150998},
	urldate = {2013-04-02},
	booktitle = {Proceedings of the seventeenth international conference on Architectural Support for Programming Languages and Operating Systems},
	author = {Clements, Austin T. and Kaashoek, M. Frans and Zeldovich, Nickolai},
	year = {2012},
	keywords = {Scalability},
	pages = {199–210},
	file = {Snapshot:/home/cota/.mozilla/firefox/a7kcjbg7.default/zotero/storage/IQC9VQ9M/citation.html:text/html}
},

@inproceedings{lotfi-kamran_scale-out_2012,
	title = {Scale-out processors},
	url = {http://dl.acm.org/citation.cfm?id=2337217},
	urldate = {2013-04-03},
	booktitle = {Proceedings of the 39th International Symposium on Computer Architecture},
	author = {Lotfi-Kamran, Pejman and Grot, Boris and Ferdman, Michael and Volos, Stavros and Kocberber, Onur and Picorel, Javier and Adileh, Almutaz and Jevdjic, Djordje and Idgunji, Sachin and Ozer, Emre},
	year = {2012},
	keywords = {Memory System Partitioning},
	pages = {500–511},
	file = {[PDF] from epfl.ch:/home/cota/.mozilla/firefox/a7kcjbg7.default/zotero/storage/GZR2HA8Z/Lotfi-Kamran et al. - 2012 - Scale-out processors.pdf:application/pdf;Snapshot:/home/cota/.mozilla/firefox/a7kcjbg7.default/zotero/storage/SB4JJF7R/citation.html:text/html}
},

@inproceedings{mutlu_stall-time_2007,
	address = {Washington, {DC}, {USA}},
	series = {{MICRO} 40},
	title = {Stall-Time Fair Memory Access Scheduling for Chip Multiprocessors},
	isbn = {0-7695-3047-8},
	url = {http://dx.doi.org/10.1109/MICRO.2007.40},
	doi = {10.1109/MICRO.2007.40},
	abstract = {{DRAM} memory is a major resource shared among cores in a chip multiprocessor ({CMP)} system. Memory requests from different threads can interfere with each other. Existing memory access scheduling techniques try to optimize the overall data throughput obtained from the {DRAM} and thus do not take into account inter-thread interference. Therefore, different threads running together on the same chip can ex- perience extremely different memory system performance: one thread can experience a severe slowdown or starvation while another is un- fairly prioritized by the memory scheduler. This paper proposes a new memory access scheduler, called the Stall-Time Fair Memory scheduler ({STFM)}, that provides quality of service to different threads sharing the {DRAM} memory system. The goal of the proposed scheduler is to "equalize" the {DRAM-related} slowdown experienced by each thread due to interference from other threads, without hurting overall system performance. As such, {STFM} takes into account inherent memory characteristics of each thread and does not unfairly penalize threads that use the {DRAM} system without interfering with other threads. We show that {STFM} significantly reduces the unfairness in the {DRAM} system while also improving system throughput (i.e., weighted speedup of threads) on a wide variety of workloads and systems. For example, averaged over 32 different workloads running on an 8-core {CMP}, the ratio between the highest {DRAM-related} slowdown and the lowest {DRAM-related} slowdown reduces from {5.26X} to {1.4X}, while the average system throughput improves by 7.6\%. We qualitatively and quantitatively compare {STFM} to one new and three previously- proposed memory access scheduling algorithms, including network fair queueing. Our results show that {STFM} provides the best fairness, system throughput, and scalability.},
	urldate = {2013-04-03},
	booktitle = {Proceedings of the 40th Annual {IEEE/ACM} International Symposium on Microarchitecture},
	publisher = {{IEEE} Computer Society},
	author = {Mutlu, Onur and Moscibroda, Thomas},
	year = {2007},
	keywords = {Memory Controller Scheduling},
	pages = {146–160},
	file = {ACM Full Text PDF:/home/cota/.mozilla/firefox/a7kcjbg7.default/zotero/storage/D79SQSE9/Mutlu and Moscibroda - 2007 - Stall-Time Fair Memory Access Scheduling for Chip .pdf:application/pdf}
},

@inproceedings{baumann_multikernel:_2009,
	title = {The multikernel: a new {OS} architecture for scalable multicore systems},
	shorttitle = {The multikernel},
	url = {http://dl.acm.org/citation.cfm?id=1629579},
	urldate = {2013-04-02},
	booktitle = {Proceedings of the {ACM} {SIGOPS} 22nd symposium on Operating systems principles},
	author = {Baumann, Andrew and Barham, Paul and Dagand, Pierre-Evariste and Harris, Tim and Isaacs, Rebecca and Peter, Simon and Roscoe, Timothy and Schüpbach, Adrian and Singhania, Akhilesh},
	year = {2009},
	keywords = {Scalability},
	pages = {29–44},
	file = {[PDF] from 128.148.32.110:/home/cota/.mozilla/firefox/a7kcjbg7.default/zotero/storage/TW5FJD3U/Baumann et al. - 2009 - The multikernel a new OS architecture for scalabl.pdf:application/pdf;Snapshot:/home/cota/.mozilla/firefox/a7kcjbg7.default/zotero/storage/AQBKSMDB/citation.html:text/html}
},

@article{shim_thread_2012,
	title = {Thread Migration Prediction for Distributed Shared Caches},
	issn = {1556-6056},
	url = {http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=6313584},
	doi = {10.1109/L-CA.2012.30},
	abstract = {Chip-multiprocessors ({CMPs)} have become the mainstream parallel architecture in recent years; for scalability reasons, designs with high core counts tend towards tiled {CMPs} with physically distributed shared caches. This naturally leads to a Non-Uniform Cache Access ({NUCA)} design, where on-chip access latencies depend on the physical distances between requesting cores and home cores where the data is cached. Improving data locality is thus key to performance, and several studies have addressed this problem using data replication and data migration. In this paper, we consider another mechanism, hardware-level thread migration. This approach, we argue, can better exploit shared data locality for {NUCA} designs by effectively replacing multiple round-trip remote cache accesses with a smaller number of migrations. High migration costs, however, make it crucial to use thread migrations judiciously; we therefore propose a novel, on-line prediction scheme which decides whether to perform a remote access (as in traditional {NUCA} designs) or to perform a thread migration at the instruction level. For a set of parallel benchmarks, our thread migration predictor improves the performance by 24\% on average over the shared-{NUCA} design that only uses remote accesses.},
	journal = {Computer Architecture Letters},
	author = {Shim, K. and Lis, M. and Khan, O. and Devadas, S.},
	year = {2012},
	keywords = {B.3.2 Design Styles, B.3.2.g Shared memory, B.3 Memory Structures, B Hardware, C.1.4 Parallel Architectures, C.1 Processor Architectures, C Computer Systems Organization, Memory System Partitioning},
	file = {IEEE Xplore Abstract Record:/home/cota/.mozilla/firefox/a7kcjbg7.default/zotero/storage/ZSQPBHRX/abs_all.html:text/html;IEEE Xplore Full Text PDF:/home/cota/.mozilla/firefox/a7kcjbg7.default/zotero/storage/UZH8TWPB/Shim et al. - 2012 - Thread Migration Prediction for Distributed Shared.pdf:application/pdf}
},

@inproceedings{dashti_traffic_2013,
	title = {Traffic management: A holistic approach to memory placement on {NUMA} systems},
	shorttitle = {Traffic management},
	url = {http://www.cs.sfu.ca/~fedorova/papers/asplos284-dashti.pdf},
	urldate = {2013-04-01},
	booktitle = {Proceedings of the eighteenth international conference on Architectural support for programming languages and operating systems},
	author = {Dashti, Mohammad and Fedorova, Alexandra and Funston, Justin and Gaud, Fabien and Lachaize, Renaud and Lepers, Baptiste and Quéma, Vivien and Roth, Mark},
	year = {2013},
	keywords = {Memory System Partitioning},
	pages = {381–394},
	file = {[PDF] from sfu.ca:/home/cota/.mozilla/firefox/a7kcjbg7.default/zotero/storage/RTRGTKVN/Dashti et al. - 2013 - Traffic management A holistic approach to memory .pdf:application/pdf}
},

@inproceedings{qureshi_utility-based_2006,
	title = {Utility-based cache partitioning: A low-overhead, high-performance, runtime mechanism to partition shared caches},
	shorttitle = {Utility-based cache partitioning},
	url = {http://dl.acm.org/citation.cfm?id=1194855},
	urldate = {2013-04-01},
	booktitle = {Proceedings of the 39th Annual {IEEE/ACM} International Symposium on Microarchitecture},
	author = {Qureshi, Moinuddin K. and Patt, Yale N.},
	year = {2006},
	keywords = {Memory System Partitioning},
	pages = {423–432},
	file = {[PDF] from northwestern.edu:/home/cota/.mozilla/firefox/a7kcjbg7.default/zotero/storage/MJIH5C2G/Qureshi and Patt - 2006 - Utility-based cache partitioning A low-overhead, .pdf:application/pdf;Snapshot:/home/cota/.mozilla/firefox/a7kcjbg7.default/zotero/storage/CMPDBVJE/citation.html:text/html}
},

@inproceedings{sanchez_vantage:_2011,
	title = {Vantage: Scalable and efficient fine-grain cache partitioning},
	shorttitle = {Vantage},
	url = {http://dx.doi.org/10.1145/2000064.2000073},
	abstract = {Cache partitioning has a wide range of uses in {CMPs}, from guaranteeing quality of service and controlled sharing to security-related techniques. However, existing cache partitioning schemes (such as way-partitioning) are limited to coarse-grain allocations, can only support few partitions, and reduce cache associativity, hurting performance. Hence, these techniques can only be applied to {CMPs} with 2-4 cores, but fail to scale to tens of cores. We present Vantage, a novel cache partitioning technique that overcomes the limitations of existing schemes: caches can have tens of partitions with sizes specified at cache line granularity, while maintaining high associativity and strong isolation among partitions. Vantage leverages cache arrays with good hashing and associativity, which enable soft-pinning a large portion of cache lines. It enforces capacity allocations by controlling the replacement process. Unlike prior schemes, Vantage provides strict isolation guarantees by partitioning most (e.g. 90\%) of the cache instead of all of it. Vantage is derived from analytical models, which allow us to provide strong guarantees and bounds on associativity and sizing independent of the number of partitions and their behaviors. It is simple to implement, requiring around 1.5\% state overhead and simple changes to the cache controller. We evaluate Vantage using extensive simulations. On a 32-core system, using 350 multi programmed workloads and one partition per core, partitioning the last-level cache with conventional techniques degrades throughput for 71 \% of the workloads versus an unpartitioned cache (by 7\% average, 25\% maximum degradation), even when using 64-way caches. In contrast, Vantage improves throughput for 98\% of the workloads, by 8\% on average (up to 20\%), using a 4-way cache.},
	booktitle = {2011 38th Annual International Symposium on Computer Architecture ({ISCA)}},
	author = {Sanchez, D. and Kozyrakis, C.},
	year = {2011},
	keywords = {Memory System Partitioning},
	pages = {57--68},
	file = {IEEE Xplore Abstract Record:/home/cota/.mozilla/firefox/a7kcjbg7.default/zotero/storage/RX48XBDX/abs_all.html:text/html;IEEE Xplore Full Text PDF:/home/cota/.mozilla/firefox/a7kcjbg7.default/zotero/storage/EQGZAE6G/Sanchez and Kozyrakis - 2011 - Vantage Scalable and efficient fine-grain cache p.pdf:application/pdf}
},

@article{martin_why_2012,
	title = {Why on-chip cache coherence is here to stay},
	volume = {55},
	url = {http://dl.acm.org/citation.cfm?id=2209269},
	number = {7},
	urldate = {2013-04-02},
	journal = {Communications of the {ACM}},
	author = {Martin, Milo {MK} and Hill, Mark D. and Sorin, Daniel J.},
	month = jul,
	year = {2012},
	keywords = {Scalability},
	pages = {78–89},
	file = {Snapshot:/home/cota/.mozilla/firefox/a7kcjbg7.default/zotero/storage/HEXZKCC3/citation.html:text/html}
},

@inproceedings{baumann_your_2009,
	title = {Your computer is already a distributed system. Why isn’t your {OS}},
	url = {https://www.usenix.org/legacyurl/your-computer-already-distributed-system-why-isnt-your-os-0},
	urldate = {2013-04-15},
	booktitle = {Proceedings of the 12th Workshop on Hot Topics in Operating Systems},
	author = {Baumann, Andrew and Peter, Simon and Schüpbach, Adrian and Singhania, Akhilesh and Roscoe, Timothy and Barham, Paul and Isaacs, Rebecca},
	year = {2009},
	keywords = {Scalability},
	file = {[HTML] from usenix.org:/home/cota/.mozilla/firefox/a7kcjbg7.default/zotero/storage/EC5EQEEM/index.html:text/html}
}